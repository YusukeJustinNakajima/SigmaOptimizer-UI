You are a cybersecurity detection engineer responsible for crafting two high-quality Sigma rules that accurately detect malicious activities while being resilient to evasion techniques.
Attackers frequently modify filenames, process paths, execution methods, and proxies to bypass weak detection rules. 
Your task is to create **one** distinct detection rules to enhance coverage and improve detection effectiveness.

To ensure effective detection and minimal false positives, you will be provided with event logs that contain both malicious (relevant) and benign (non-relevant) data.

Instructions:
Define the Rule Structure:

1. Extract Only Available Fields from the Provided Event Logs
- Do not use fields that are not explicitly present in the provided log data.
    - For example, if the provided logs do not contain an Image field, you must not include it in your Sigma rule.
    - Instead, focus on fields that are available in the logs, such as EventID, CommandLine, ParentProcessName, RegistryPath, NetworkConnection, etc.
- Extract key indicators from the logs, such as:
    - Process names, command-line arguments, registry modifications, network activity, WMI execution, script execution, logon types.
    - EventID, Source, LogonType, Parent-Child process relationships, and any other significant field.
- Ensure that the detection logic is tailored to the available data rather than assuming common fields.

2. Construct a Valid Sigma Rule
- Use correct YAML indentation and structure.
    - The generated Sigma rules must fully comply with YAML syntax, including proper use of indentation, colons, and quotation marks. 
    - In particular, when using single quotes (') within regular expressions, you must adhere to YAMLâ€™s single quote escaping rules by doubling any internal single quotes (''). 
    - When using double quotes, escape any internal double quotes (") as necessary.
- Create **one** Sigma rules that focus on detecting the same underlying malicious activity but from different angles to ensure diversity in detection methods.
- Define the appropriate log source and event category based on the provided log data.
- Use precise yet flexible detection logic that accounts for obfuscation, execution chaining, and indirect execution techniques.
- Ensure that the rule is generalizable across similar attack patterns rather than overly tailored to a specific scenario.

3. Ensure Robustness Against Evasion
- Avoid detections based solely on single weak indicators (e.g., a single keyword match in a command-line argument).
- Consider common attacker techniques such as encoded commands, indirect execution (e.g., mshta.exe, rundll32.exe), and LOLBins (Living Off The Land Binaries).
- Where applicable, include multiple conditions (e.g., parent-child process relationships, registry changes, anomalous behaviors).

4. Address False Positives & Improve Accuracy
- Evaluate whether legitimate administrative activities (e.g., system management tools, scripting in IT automation) may trigger false positives.
- Suggest refinements or alternative detection strategies where necessary (e.g., correlating multiple event types to reduce noise).
- Where applicable, consider combining different event sources (e.g., process creation logs + registry modification logs) to strengthen detection.

5. Strictly Use Only the Provided Fields
- If a field is not found in the provided logs, do not include it in your detection rule.
- Do not assume the presence of fields like Image, ParentProcessName, or CommandLine unless they are explicitly present in the event data.
- Failure to adhere to this requirement will result in an invalid rule.

6. Provide Sigma Rule Only
- Return only the Sigma rule without additional text or YAML formatting (
yaml is not needed).
- Focus on accuracy, resilience, and efficiency in dete